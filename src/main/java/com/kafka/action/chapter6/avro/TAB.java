/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.kafka.action.chapter6.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TAB extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7306096202629010122L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TAB\",\"namespace\":\"com.kafka.action.chapter6.avro\",\"fields\":[{\"name\":\"ID\",\"type\":\"int\"},{\"name\":\"BIRTHDATE\",\"type\":\"string\"},{\"name\":\"AGE\",\"type\":\"int\"},{\"name\":\"NAME\",\"type\":\"string\"},{\"name\":\"LASTUPDATEDTTM\",\"type\":\"string\"},{\"name\":\"PARTITION_Filter\",\"type\":\"string\"},{\"name\":\"ISDELETED\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TAB> ENCODER =
      new BinaryMessageEncoder<TAB>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TAB> DECODER =
      new BinaryMessageDecoder<TAB>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<TAB> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<TAB> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TAB>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this TAB to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a TAB from a ByteBuffer. */
  public static TAB fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int ID;
  @Deprecated public java.lang.CharSequence BIRTHDATE;
  @Deprecated public int AGE;
  @Deprecated public java.lang.CharSequence NAME;
  @Deprecated public java.lang.CharSequence LASTUPDATEDTTM;
  @Deprecated public java.lang.CharSequence PARTITION_Filter;
  @Deprecated public int ISDELETED;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TAB() {}

  /**
   * All-args constructor.
   * @param ID The new value for ID
   * @param BIRTHDATE The new value for BIRTHDATE
   * @param AGE The new value for AGE
   * @param NAME The new value for NAME
   * @param LASTUPDATEDTTM The new value for LASTUPDATEDTTM
   * @param PARTITION_Filter The new value for PARTITION_Filter
   * @param ISDELETED The new value for ISDELETED
   */
  public TAB(java.lang.Integer ID, java.lang.CharSequence BIRTHDATE, java.lang.Integer AGE, java.lang.CharSequence NAME, java.lang.CharSequence LASTUPDATEDTTM, java.lang.CharSequence PARTITION_Filter, java.lang.Integer ISDELETED) {
    this.ID = ID;
    this.BIRTHDATE = BIRTHDATE;
    this.AGE = AGE;
    this.NAME = NAME;
    this.LASTUPDATEDTTM = LASTUPDATEDTTM;
    this.PARTITION_Filter = PARTITION_Filter;
    this.ISDELETED = ISDELETED;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return ID;
    case 1: return BIRTHDATE;
    case 2: return AGE;
    case 3: return NAME;
    case 4: return LASTUPDATEDTTM;
    case 5: return PARTITION_Filter;
    case 6: return ISDELETED;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: ID = (java.lang.Integer)value$; break;
    case 1: BIRTHDATE = (java.lang.CharSequence)value$; break;
    case 2: AGE = (java.lang.Integer)value$; break;
    case 3: NAME = (java.lang.CharSequence)value$; break;
    case 4: LASTUPDATEDTTM = (java.lang.CharSequence)value$; break;
    case 5: PARTITION_Filter = (java.lang.CharSequence)value$; break;
    case 6: ISDELETED = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'ID' field.
   * @return The value of the 'ID' field.
   */
  public java.lang.Integer getID() {
    return ID;
  }

  /**
   * Sets the value of the 'ID' field.
   * @param value the value to set.
   */
  public void setID(java.lang.Integer value) {
    this.ID = value;
  }

  /**
   * Gets the value of the 'BIRTHDATE' field.
   * @return The value of the 'BIRTHDATE' field.
   */
  public java.lang.CharSequence getBIRTHDATE() {
    return BIRTHDATE;
  }

  /**
   * Sets the value of the 'BIRTHDATE' field.
   * @param value the value to set.
   */
  public void setBIRTHDATE(java.lang.CharSequence value) {
    this.BIRTHDATE = value;
  }

  /**
   * Gets the value of the 'AGE' field.
   * @return The value of the 'AGE' field.
   */
  public java.lang.Integer getAGE() {
    return AGE;
  }

  /**
   * Sets the value of the 'AGE' field.
   * @param value the value to set.
   */
  public void setAGE(java.lang.Integer value) {
    this.AGE = value;
  }

  /**
   * Gets the value of the 'NAME' field.
   * @return The value of the 'NAME' field.
   */
  public java.lang.CharSequence getNAME() {
    return NAME;
  }

  /**
   * Sets the value of the 'NAME' field.
   * @param value the value to set.
   */
  public void setNAME(java.lang.CharSequence value) {
    this.NAME = value;
  }

  /**
   * Gets the value of the 'LASTUPDATEDTTM' field.
   * @return The value of the 'LASTUPDATEDTTM' field.
   */
  public java.lang.CharSequence getLASTUPDATEDTTM() {
    return LASTUPDATEDTTM;
  }

  /**
   * Sets the value of the 'LASTUPDATEDTTM' field.
   * @param value the value to set.
   */
  public void setLASTUPDATEDTTM(java.lang.CharSequence value) {
    this.LASTUPDATEDTTM = value;
  }

  /**
   * Gets the value of the 'PARTITION_Filter' field.
   * @return The value of the 'PARTITION_Filter' field.
   */
  public java.lang.CharSequence getPARTITIONFilter() {
    return PARTITION_Filter;
  }

  /**
   * Sets the value of the 'PARTITION_Filter' field.
   * @param value the value to set.
   */
  public void setPARTITIONFilter(java.lang.CharSequence value) {
    this.PARTITION_Filter = value;
  }

  /**
   * Gets the value of the 'ISDELETED' field.
   * @return The value of the 'ISDELETED' field.
   */
  public java.lang.Integer getISDELETED() {
    return ISDELETED;
  }

  /**
   * Sets the value of the 'ISDELETED' field.
   * @param value the value to set.
   */
  public void setISDELETED(java.lang.Integer value) {
    this.ISDELETED = value;
  }

  /**
   * Creates a new TAB RecordBuilder.
   * @return A new TAB RecordBuilder
   */
  public static com.kafka.action.chapter6.avro.TAB.Builder newBuilder() {
    return new com.kafka.action.chapter6.avro.TAB.Builder();
  }

  /**
   * Creates a new TAB RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TAB RecordBuilder
   */
  public static com.kafka.action.chapter6.avro.TAB.Builder newBuilder(com.kafka.action.chapter6.avro.TAB.Builder other) {
    return new com.kafka.action.chapter6.avro.TAB.Builder(other);
  }

  /**
   * Creates a new TAB RecordBuilder by copying an existing TAB instance.
   * @param other The existing instance to copy.
   * @return A new TAB RecordBuilder
   */
  public static com.kafka.action.chapter6.avro.TAB.Builder newBuilder(com.kafka.action.chapter6.avro.TAB other) {
    return new com.kafka.action.chapter6.avro.TAB.Builder(other);
  }

  /**
   * RecordBuilder for TAB instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TAB>
    implements org.apache.avro.data.RecordBuilder<TAB> {

    private int ID;
    private java.lang.CharSequence BIRTHDATE;
    private int AGE;
    private java.lang.CharSequence NAME;
    private java.lang.CharSequence LASTUPDATEDTTM;
    private java.lang.CharSequence PARTITION_Filter;
    private int ISDELETED;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.kafka.action.chapter6.avro.TAB.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ID)) {
        this.ID = data().deepCopy(fields()[0].schema(), other.ID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.BIRTHDATE)) {
        this.BIRTHDATE = data().deepCopy(fields()[1].schema(), other.BIRTHDATE);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.AGE)) {
        this.AGE = data().deepCopy(fields()[2].schema(), other.AGE);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.NAME)) {
        this.NAME = data().deepCopy(fields()[3].schema(), other.NAME);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.LASTUPDATEDTTM)) {
        this.LASTUPDATEDTTM = data().deepCopy(fields()[4].schema(), other.LASTUPDATEDTTM);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.PARTITION_Filter)) {
        this.PARTITION_Filter = data().deepCopy(fields()[5].schema(), other.PARTITION_Filter);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.ISDELETED)) {
        this.ISDELETED = data().deepCopy(fields()[6].schema(), other.ISDELETED);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TAB instance
     * @param other The existing instance to copy.
     */
    private Builder(com.kafka.action.chapter6.avro.TAB other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.ID)) {
        this.ID = data().deepCopy(fields()[0].schema(), other.ID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.BIRTHDATE)) {
        this.BIRTHDATE = data().deepCopy(fields()[1].schema(), other.BIRTHDATE);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.AGE)) {
        this.AGE = data().deepCopy(fields()[2].schema(), other.AGE);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.NAME)) {
        this.NAME = data().deepCopy(fields()[3].schema(), other.NAME);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.LASTUPDATEDTTM)) {
        this.LASTUPDATEDTTM = data().deepCopy(fields()[4].schema(), other.LASTUPDATEDTTM);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.PARTITION_Filter)) {
        this.PARTITION_Filter = data().deepCopy(fields()[5].schema(), other.PARTITION_Filter);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.ISDELETED)) {
        this.ISDELETED = data().deepCopy(fields()[6].schema(), other.ISDELETED);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'ID' field.
      * @return The value.
      */
    public java.lang.Integer getID() {
      return ID;
    }

    /**
      * Sets the value of the 'ID' field.
      * @param value The value of 'ID'.
      * @return This builder.
      */
    public com.kafka.action.chapter6.avro.TAB.Builder setID(int value) {
      validate(fields()[0], value);
      this.ID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'ID' field has been set.
      * @return True if the 'ID' field has been set, false otherwise.
      */
    public boolean hasID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'ID' field.
      * @return This builder.
      */
    public com.kafka.action.chapter6.avro.TAB.Builder clearID() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'BIRTHDATE' field.
      * @return The value.
      */
    public java.lang.CharSequence getBIRTHDATE() {
      return BIRTHDATE;
    }

    /**
      * Sets the value of the 'BIRTHDATE' field.
      * @param value The value of 'BIRTHDATE'.
      * @return This builder.
      */
    public com.kafka.action.chapter6.avro.TAB.Builder setBIRTHDATE(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.BIRTHDATE = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'BIRTHDATE' field has been set.
      * @return True if the 'BIRTHDATE' field has been set, false otherwise.
      */
    public boolean hasBIRTHDATE() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'BIRTHDATE' field.
      * @return This builder.
      */
    public com.kafka.action.chapter6.avro.TAB.Builder clearBIRTHDATE() {
      BIRTHDATE = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'AGE' field.
      * @return The value.
      */
    public java.lang.Integer getAGE() {
      return AGE;
    }

    /**
      * Sets the value of the 'AGE' field.
      * @param value The value of 'AGE'.
      * @return This builder.
      */
    public com.kafka.action.chapter6.avro.TAB.Builder setAGE(int value) {
      validate(fields()[2], value);
      this.AGE = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'AGE' field has been set.
      * @return True if the 'AGE' field has been set, false otherwise.
      */
    public boolean hasAGE() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'AGE' field.
      * @return This builder.
      */
    public com.kafka.action.chapter6.avro.TAB.Builder clearAGE() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'NAME' field.
      * @return The value.
      */
    public java.lang.CharSequence getNAME() {
      return NAME;
    }

    /**
      * Sets the value of the 'NAME' field.
      * @param value The value of 'NAME'.
      * @return This builder.
      */
    public com.kafka.action.chapter6.avro.TAB.Builder setNAME(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.NAME = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'NAME' field has been set.
      * @return True if the 'NAME' field has been set, false otherwise.
      */
    public boolean hasNAME() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'NAME' field.
      * @return This builder.
      */
    public com.kafka.action.chapter6.avro.TAB.Builder clearNAME() {
      NAME = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'LASTUPDATEDTTM' field.
      * @return The value.
      */
    public java.lang.CharSequence getLASTUPDATEDTTM() {
      return LASTUPDATEDTTM;
    }

    /**
      * Sets the value of the 'LASTUPDATEDTTM' field.
      * @param value The value of 'LASTUPDATEDTTM'.
      * @return This builder.
      */
    public com.kafka.action.chapter6.avro.TAB.Builder setLASTUPDATEDTTM(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.LASTUPDATEDTTM = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'LASTUPDATEDTTM' field has been set.
      * @return True if the 'LASTUPDATEDTTM' field has been set, false otherwise.
      */
    public boolean hasLASTUPDATEDTTM() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'LASTUPDATEDTTM' field.
      * @return This builder.
      */
    public com.kafka.action.chapter6.avro.TAB.Builder clearLASTUPDATEDTTM() {
      LASTUPDATEDTTM = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'PARTITION_Filter' field.
      * @return The value.
      */
    public java.lang.CharSequence getPARTITIONFilter() {
      return PARTITION_Filter;
    }

    /**
      * Sets the value of the 'PARTITION_Filter' field.
      * @param value The value of 'PARTITION_Filter'.
      * @return This builder.
      */
    public com.kafka.action.chapter6.avro.TAB.Builder setPARTITIONFilter(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.PARTITION_Filter = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'PARTITION_Filter' field has been set.
      * @return True if the 'PARTITION_Filter' field has been set, false otherwise.
      */
    public boolean hasPARTITIONFilter() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'PARTITION_Filter' field.
      * @return This builder.
      */
    public com.kafka.action.chapter6.avro.TAB.Builder clearPARTITIONFilter() {
      PARTITION_Filter = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'ISDELETED' field.
      * @return The value.
      */
    public java.lang.Integer getISDELETED() {
      return ISDELETED;
    }

    /**
      * Sets the value of the 'ISDELETED' field.
      * @param value The value of 'ISDELETED'.
      * @return This builder.
      */
    public com.kafka.action.chapter6.avro.TAB.Builder setISDELETED(int value) {
      validate(fields()[6], value);
      this.ISDELETED = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'ISDELETED' field has been set.
      * @return True if the 'ISDELETED' field has been set, false otherwise.
      */
    public boolean hasISDELETED() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'ISDELETED' field.
      * @return This builder.
      */
    public com.kafka.action.chapter6.avro.TAB.Builder clearISDELETED() {
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TAB build() {
      try {
        TAB record = new TAB();
        record.ID = fieldSetFlags()[0] ? this.ID : (java.lang.Integer) defaultValue(fields()[0]);
        record.BIRTHDATE = fieldSetFlags()[1] ? this.BIRTHDATE : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.AGE = fieldSetFlags()[2] ? this.AGE : (java.lang.Integer) defaultValue(fields()[2]);
        record.NAME = fieldSetFlags()[3] ? this.NAME : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.LASTUPDATEDTTM = fieldSetFlags()[4] ? this.LASTUPDATEDTTM : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.PARTITION_Filter = fieldSetFlags()[5] ? this.PARTITION_Filter : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.ISDELETED = fieldSetFlags()[6] ? this.ISDELETED : (java.lang.Integer) defaultValue(fields()[6]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TAB>
    WRITER$ = (org.apache.avro.io.DatumWriter<TAB>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TAB>
    READER$ = (org.apache.avro.io.DatumReader<TAB>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
